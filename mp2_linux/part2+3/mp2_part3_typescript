Script started on Thu 02 Apr 2020 12:45:24 PM EDT
tuser@tutor-vserver:~$ ssh mikehj24@users.cs.umb.edu
mikehj24@users.cs.umb.edu's password: 
Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-171-generic x86_64)

66 packages can be updated.
58 updates are security updates.


6 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

Authorized users only.

Contact: operator@cs.umb.edu or 617-287-6480


Mon Feb 24 04:17:07 EST 2020
- Account applications are being processed at least daily.
- Mail lists are coming back up to speed; simple lists
  are now known on the new mx1.  Fancy pipeline aliases,
  such as the operator queue, should be available again
  after some tuning.

You have new mail.
Last login: Thu Apr  2 11:39:39 2020 from 75.69.60.201

mikehj24@itserver6:~$ cd cs341/mp2_linuc[Kx/part2+3
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ pwd
/home/mikehj24/cs341/mp2_linux/part2+3
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$  cat strncpyc.c
/* strncpyc.c: driver for testing assembly language mystrncpy function 

	Bob Wilson

	4/28/2016

     Modified by Ron Cheung 3/4/2019

   */



#include <stdio_1.h>
extern char *mystrncpy(char *s, char *ct, int n);



int main()

{

   char s[10], ct[100];

   int n;



  printf("Enter a string of characters:\n");

  /* read all inputs until the \n character */
  scanf("%[^\n]s", ct);

  printf("Enter the number of characters to copy:\n");

  scanf("%d", &n);



  if(s == mystrncpy(s, ct,n))

      printf("The strncpy function returned the correct pointer value.\n");

  else

      printf("The strncpy function returned the wrong pointer value.\n");

  if (!strncmp(s,ct, n))

      printf("The strncpy function copied the data correctly.\n");

  else

      printf("The strncpy function copied the data incorrectly.\n");

  printf("The content of the first %d characters of array s is: %s\n",n, s);

  return 0;	

}

mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ cat strncpyc.c[C[1P.c[C[C[Ks
.text

	.globl  mystrncpy

mystrncpy:

	pushl	%ebp			# This will setup stack frame

	movl	%esp, %ebp

	movl	8(%ebp), %ecx		# This will get argument s

	movl	12(%ebp), %edx		# This will get argument ct

	movl    16(%ebp), %edi	        # This will get argument n

loop:

	movb	(%edx), %al             # This will move a byte from source

	movb	%al, (%ecx)	        # This will move via al to destination

	incl	%ecx		        # This will increment to pointer

	incl	%edx	                # This will increment from pointer

	decl    %edi                    # This will decrement number of bytes moved to n

	cmpb    $0, %al		        # This will check for null terminator

	jz      exit		        # This will jump if the byte moved was the null term

	cmpl    $0, %edi            	# This will check if nis 0

	jnz     loop                	# This will jump out of the loop # of byte moved is not equal to 0



exit:

	movl	8(%ebp), %eax		# This will return address of s in %eax

	movl	%ebp, %esp		# This will remove stack frame

	popl	%ebp

	ret

	.end

mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ cat strncpy.s[Kls
makefile	      printbinc.c   printbin.o	   strncpyc.c
mp2_part2_typescript  printbinc.o   printbin.s	   strncpy.s
part2gdb	      printbin.lnx  printbin.syms  syms
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ cat makefile
# makefile: makefile for assembly-language examples
# 
# Assumes a matched pair of sources, e.g., myprog.s and myprogc.c,
# an assembler source for a function and its C driver.

# Usage: For an assembler source, say myprog.s, with a corresponding 
#  C driver myprogc.c, set A to the basename in the make command line: 
#
#  "make A=myprog myprog.lnx" or just "make A=myprog"
#
#  (since $(A).lnx is the first make target)
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)

# also "make clean" to clean up non-source files in a directory
# All UNIX tools from ulab had been moved to LINUX by
#
#     Ron Cheung (2/28/2020)
#
# Here the assembler program has the primary source name,
# the C program is just a driver of almost the same basename:
C = $(A)c

# system directories needed for compilers, libraries, header files--
SAPC_TOOLS = /home/cheungr/serl/tutor-linux
PC_LIB = $(SAPC_TOOLS)/libc_tmp
PC_INC = $(SAPC_TOOLS)/include


CC    = gcc
CFLAGS  = -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib     -c -Wall -I$(PC_INC)
AS    = as --32
NM    = nm
LD    = ld -m elf_i386

#CC   = $(SAPC_GNUBIN)/i386-gcc
#CFLAGS = -g -Wall -Wno-implicit -Wshadow -I$(PC_INC)
#AS   = $(SAPC_GNUBIN)/i386-as
#LD   = $(SAPC_GNUBIN)/i386-ld
#NM   = $(SAPC_GNUBIN)/i386-nm

# File suffixes:
# .c	C source (often useful both for UNIX host and SAPC)
# .s 	assembly language source
# .o  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x100100, load special startup
# module, special PC C libraries--

$(A).lnx: $(A).o $(C).o 
	$(LD) -N -Ttext 100100 -o $(A).lnx \
		$(PC_LIB)/startup0.o $(PC_LIB)/startup.o \
		$(C).o $(A).o $(PC_LIB)/libc.a
	rm -f syms;$(NM) -n $(A).lnx>$(A).syms;ln -s $(A).syms syms

$(A).o: $(A).s
	$(AS) -o $(A).o $(A).s

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).o: $(C).c
	$(CC) $(CFLAGS) -c -o $(C).o $(C).c
	
clean:
	rm -f *.o *.syms *.lnx core syms
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ make A [K=strncpy
as --32 -o strncpy.o strncpy.s
gcc -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib     -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o strncpyc.o strncpyc.c
[01m[Kstrncpyc.c:[m[K In function â€˜[01m[Kmain[m[Kâ€™:
[01m[Kstrncpyc.c:25:8:[m[K [01;35m[Kwarning: [m[Kimplicit declaration of function â€˜[01m[Kstrncmp[m[Kâ€™ [-Wimplicit-function-declaration]
   if (!strncmp(s,ct, n))

[01;32m[K        ^[m[K
ld -m elf_i386 -N -Ttext 100100 -o strncpy.lnx \
	/home/cheungr/serl/tutor-linux/libc_tmp/startup0.o /home/cheungr/serl/tutor-linux/libc_tmp/startup.o \
	strncpyc.o strncpy.o /home/cheungr/serl/tutor-linux/libc_tmp/libc.a
rm -f syms;nm -n strncpy.lnx>strncpy.syms;ln -s strncpy.syms syms
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ ls -lg
total 108
-rw-r--r-- 1 cs341-1G  2265 Mar 26 18:50 makefile
-rw-r--r-- 1 cs341-1G 17869 Apr  2 11:51 mp2_part2_typescript
-rw-r--r-- 1 cs341-1G  1299 Apr  2 11:48 part2gdb
-rw-r--r-- 1 cs341-1G   416 Mar 26 18:50 printbinc.c
-rw-r--r-- 1 cs341-1G  2760 Apr  1 18:45 printbinc.o
-rwxr-xr-x 1 cs341-1G 19232 Apr  1 18:45 printbin.lnx
-rw-r--r-- 1 cs341-1G   716 Apr  1 18:45 printbin.o
-rw-r--r-- 1 cs341-1G   531 Apr  1 18:43 printbin.s
-rw-r--r-- 1 cs341-1G   788 Apr  1 18:45 printbin.syms
-rw-r--r-- 1 cs341-1G   926 Mar 26 18:50 strncpyc.c
-rw-r--r-- 1 cs341-1G  3488 Apr  2 12:49 strncpyc.o
-rwxr-xr-x 1 cs341-1G 20232 Apr  2 12:49 strncpy.lnx
-rw-r--r-- 1 cs341-1G   548 Apr  2 12:49 strncpy.o
-rw-r--r-- 1 cs341-1G  1046 Apr  2 12:43 strncpy.s
-rw-r--r-- 1 cs341-1G   746 Apr  2 12:49 strncpy.syms
lrwxrwxrwx 1 cs341-1G    12 Apr  2 12:49 syms -> strncpy.syms
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ ls -al
total 116
drwxr-sr-x 2 mikehj24 cs341-1G  4096 Apr  2 12:49 .
drwxr-sr-x 5 mikehj24 cs341-1G  4096 Mar 26 18:54 ..
-rw-r--r-- 1 mikehj24 cs341-1G  2265 Mar 26 18:50 makefile
-rw-r--r-- 1 mikehj24 cs341-1G 17869 Apr  2 11:51 mp2_part2_typescript
-rw-r--r-- 1 mikehj24 cs341-1G  1299 Apr  2 11:48 part2gdb
-rw-r--r-- 1 mikehj24 cs341-1G   416 Mar 26 18:50 printbinc.c
-rw-r--r-- 1 mikehj24 cs341-1G  2760 Apr  1 18:45 printbinc.o
-rwxr-xr-x 1 mikehj24 cs341-1G 19232 Apr  1 18:45 printbin.lnx
-rw-r--r-- 1 mikehj24 cs341-1G   716 Apr  1 18:45 printbin.o
-rw-r--r-- 1 mikehj24 cs341-1G   531 Apr  1 18:43 printbin.s
-rw-r--r-- 1 mikehj24 cs341-1G   788 Apr  1 18:45 printbin.syms
-rw-r--r-- 1 mikehj24 cs341-1G   926 Mar 26 18:50 strncpyc.c
-rw-r--r-- 1 mikehj24 cs341-1G  3488 Apr  2 12:49 strncpyc.o
-rwxr-xr-x 1 mikehj24 cs341-1G 20232 Apr  2 12:49 strncpy.lnx
-rw-r--r-- 1 mikehj24 cs341-1G   548 Apr  2 12:49 strncpy.o
-rw-r--r-- 1 mikehj24 cs341-1G  1046 Apr  2 12:43 strncpy.s
-rw-r--r-- 1 mikehj24 cs341-1G   746 Apr  2 12:49 strncpy.syms
lrwxrwxrwx 1 mikehj24 cs341-1G    12 Apr  2 12:49 syms -> strncpy.syms
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ pwd
/home/mikehj24/cs341/mp2_linux/part2+3
mikehj24@itserver6:~/cs341/mp2_linux/part2+3$ logout
Connection to users.cs.umb.edu closed.

tuser@tutor-vserver:~$ pwd
/home/tuser
tuser@tutor-vserver:~$ scp mikehj24@users.cs.umb.edu:cs341/mp2_linux/part2+3/str 
ncpy.* .
mikehj24@users.cs.umb.edu's password: 

strncpy.lnx                                     0%    0     0.0KB/s   --:-- ETA
strncpy.lnx                                   100%   20KB  19.8KB/s   00:00    

strncpy.o                                       0%    0     0.0KB/s   --:-- ETA
strncpy.o                                     100%  548     0.5KB/s   00:00    

strncpy.s                                       0%    0     0.0KB/s   --:-- ETA
strncpy.s                                     100% 1046     1.0KB/s   00:00    

strncpy.syms                                    0%    0     0.0KB/s   --:-- ETA
strncpy.syms                                  100%  746     0.7KB/s   00:00    
tuser@tutor-vserver:~$ ls -lg
total 228
-rw-r--r-- 1 tuser  1378 Apr  2 11:27 a1
-rw-r--r-- 1 tuser  2504 Apr  2 11:27 a2
-rwxr-xr-x 1 tuser 19312 Apr  1 15:55 [0m[01;32mcount.lnx[0m
-rw-r--r-- 1 tuser   684 Apr  1 15:55 count.o
-rw-r--r-- 1 tuser   574 Apr  1 15:55 count.s
-rw-r--r-- 1 tuser   768 Apr  1 15:55 count.syms
drwxr-sr-x 2 tuser  4096 Jul 20  2015 [01;34minclude[0m
drwxr-sr-x 2 tuser  4096 Jul 20  2015 [01;34mlib[0m
-rw-r--r-- 1 tuser  1880 Apr  2 09:47 miko
-rw-r--r-- 1 tuser     0 Apr  2 09:29 mikoslayer
-rw-r--r-- 1 tuser  7962 Apr  1 16:03 mp2_part1_typescript
-rw-r--r-- 1 tuser 16874 Apr  1 18:50 mp2_part2_typescript
-rw-r--r-- 1 tuser  8192 Apr  2 12:49 mp2_part3_typescript
-rw-r--r-- 1 tuser  1299 Apr  2 11:46 p2gdb
-rwxr-xr-x 1 tuser 19232 Apr  1 18:58 [01;32mprintbin.lnx[0m
-rw-r--r-- 1 tuser   716 Apr  1 18:58 printbin.o
-rw-r--r-- 1 tuser   531 Apr  1 18:58 printbin.s
-rw-r--r-- 1 tuser   788 Apr  1 18:58 printbin.syms
-rwxr-xr-x 1 tuser 20232 Apr  2 12:51 [01;32mstrncpy.lnx[0m
-rw-r--r-- 1 tuser   548 Apr  2 12:51 strncpy.o
-rw-r--r-- 1 tuser  1046 Apr  2 12:51 strncpy.s
-rw-r--r-- 1 tuser   746 Apr  2 12:51 strncpy.syms
drwxr-sr-x 2 tuser  4096 Jul 20  2015 [01;34mtestaout[0m
-rw-r--r-- 1 tuser   818 Jul 20  2015 test.c
drwxr-sr-x 2 tuser  4096 Jul 20  2015 [01;34mtestelf[0m
-rw-r--r-- 1 tuser   688 Jul 20  2015 testelf.syms
-rw-r--r-- 1 tuser    67 Jul 20  2015 test.s
-rw-r--r-- 1 tuser  2171 Apr  2 10:52 thegdbpart
-rwxr-xr-x 1 tuser   456 Apr  1 12:16 [01;32mtiny.lnx[0m
-rw-r--r-- 1 tuser   480 Apr  1 12:16 tiny.o
-rw-r--r-- 1 tuser   127 Apr  1 12:16 tiny.s
-rw-r--r-- 1 tuser  2212 Mar  5 11:18 tutor.c
-rwxr-xr-x 1 tuser 23296 Mar  5 11:18 [01;32mtutor.lnx[0m
-rw-r--r-- 1 tuser  3600 Mar  5 11:18 tutor.o
-rw-r--r-- 1 tuser  3947 Mar 26 12:53 warmup-vserver
tuser@tutor-vserver:~$ pwd
/home/tuser
tuser@tutor-vserver:~$ mtip -f strncpy.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 

Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading strncpy.lnx

........Done.



Download done, setting EIP to 100100.
Tutor> go 100100

Enter a string of characters:
aaaaaaaaaaaaa
Enter the number of characters to copy:
aThe strncpy function returned the correct pointer value.
The strncpy function copied the data correctly.
The content of the first 0 characters of array s is: aaaaaaaaaaaaa
Exception 3 at EIP=00100110: Breakpoint
Tutor> go 100100

Enter a string of characters:
machineprogramming
Enter the number of characters to copy:
mThe strncpy function returned the correct pointer value.
The strncpy function copied the data correctly.
The content of the first 0 characters of array s is: machineprogramming
Please type <CR> to confirm console setting: 
Quit handler: 
killing process 1870 Leaving board #1
tuser@tutor-vserver:~$ exit
exit

Script done on Thu 02 Apr 2020 12:54:49 PM EDT
